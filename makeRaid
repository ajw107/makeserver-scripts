#!/usr/bin/env bash
#####TODO
#-make filesnames copied over from sda definable constants
#-make all locations copied to definable constants
#-ubuntu 19.04 comes with mdadm 4.1, so check installed version before downloading
#-also it seems to generate it's own mdadm.conf, should we use or not?
#-diagnostic code moved to createOverlays.  Need to do all the redirects again.  Also remember it messed up sda
# mount, so be careful
#-EVERYTHING

######Import common functions and constants
commFuncFile="${HOME}/bin/commonfunctions"
if $(sudo test -e "${commFuncFile}")
then
    echo "Loading ${commFuncFile}..."
    . "${commFuncFile}"
fi

######Initialise Variables
#grab sensitive values
secretsFile="${HOME}/secrets/$(basename "${BASH_SOURCE}")_secrets"
if $(sudo test -e "${secretsFile}")
then
    echo "Loading ${secretsFile}..."
    . "${secretsFile}"
fi

declare -r MDADM_VER="4.1"
declare -r MDADM_CONFIG_FILE_REMOTE="${ETC_DIR_REMOTE}/mdadm/mdadm.conf"
declare -r MDADM_CONFIG_FILE_LOCAL="${ETC_DIR_LOCAL}/mdadm/mdadm.conf"
declare -r RAID_FSTAB_REMOTE="${USER_HOME_DIR_REMOTE}/fstab.raid"
declare -r READ_ONLY_MOUNT="ro"
declare -r READ_WRITE_MOUNT="rw"
declare driveMountMode=${READ_ONLY_MOUNT}
declare -i appendFSTAB="${FALSE}"
declare fstabLocation=""
declare -r PROG_NAME="makeRaid"
declare -r PROG_VER="1.0"
declare -r AUTHOR="Alex Wood"
declare -r AUTHOR_EMAIL="alex@alex-wood.org.uk"
echo -e "${BLACK_BACKGROUND}${WHITE_TEXT}   "


#####Functions
function createOverlays()
{
    UUID=$(sudo mdadm -E /dev/sdi|perl -ne '/Array UUID : (\S+)/ and print $1')
    DEVICES=$(cat /proc/partitions | parallel --tagstring {5} --colsep ' +' sudo mdadm -E /dev/{5} |grep $UUID | parallel --colsep '\t' echo /dev/{1})
    infoText "UUID: ${UUID}" ${INFO_TEXT_MISC_NO_DOTS}
    infoText "DEVICES: ${DEVICES}" ${INFO_TEXT_MISC_NO_DOTS}
    parallel 'test -e /dev/loop{#} || mknod -m 660 /dev/loop{#} b 7 {#}' ::: $DEVICES
    parallel truncate -s4000G overlay-{/} ::: $DEVICES
    parallel 'size=$(sudo blockdev --getsize {}); loop=$(sudo losetup -f --show -- overlay-{/}); echo 0 $size snapshot {} $loop P 8 | sudo dmsetup create {/}' ::: $DEVICES
    OVERLAYS=$(parallel echo /dev/mapper/{/} ::: $DEVICES)
    infoText "OVERLAYS: ${OVERLAYS}" ${INFO_TEXT_MISCNO_DOTS}
    sudo dmsetup status
    parallel --tag -k sudo mdadm -E ::: $OVERLAYS|grep -E 'Update'
    parallel --tag -k sudo mdadm -E ::: $OVERLAYS|grep -E 'Role'
    # this will start to assemble the arrays with the overlays in place, then pause the assembly to remove the overlays
    # (otherwize they will fill up your system drive) then continue on with just the bare drives
    # once they have been added back as spares.  Note we are usiong md1 so as not to confuse with the original md0
    #sudo mdadm --assemble --force /dev/md1 $OVERLAYS
    #echo 0 | sudo tee /proc/sys/dev/raid/speed_limit_max
    #echo 0 | sudo tee /proc/sys/dev/raid/speed_limit_min
    #parallel -j1 sudo mdadm --add /dev/md1 ::: $OVERLAY
    #cat /proc/mdstat
    #sudo mdadm --stop /dev/md1
    #sudo mdadm --assemble /dev/md1

    read -p "${INFO_TEXT_START}Press Enter To Unmount Overlays${NORMAL_TEXT}"
    ##undo
    parallel 'sudo dmsetup remove {/}; rm overlay-{/}' ::: $DEVICES
    parallel sudo losetup -d ::: /dev/loop[0-9]*
}

function overlay_create ()
{
        free=$((`stat -c '%a*%S/1024/1024' -f .`))
        echo free ${free}M
        overlays=""
        overlay_remove
        for d in $DEVICES; do
                b=$(basename /dev/$d)
                size_bkl=$(sudo blockdev --getsz /dev/$d) # in 512 blocks/sectors
                # reserve 1M space for snapshot header
                # ext3 max file length is 2TB   
                truncate -s$((((size_bkl+1)/2)+1024))K $b.ovr || (echo "Do you use ext4?"; return 1)
                loop=$(sudo losetup -f --show -- $b.ovr)
                # https://www.kernel.org/doc/Documentation/device-mapper/snapshot.txt
                sudo dmsetup create $b --table "0 $size_bkl snapshot /dev/$d $loop P 8"
                echo /dev/$d $((size_bkl/2048))M $loop /dev/mapper/$b
                overlays="$overlays /dev/mapper/$b"
        done
        overlays=${overlays# }
}

function overlay_remove ()
{
        for d in $DEVICES; do
                b=$(basename /dev/$d)
                $(sudo test -e /dev/mapper/$b) && sudo dmsetup remove $b && echo /dev/mapper/$b 
                if $(sudo test -e $b.ovr )
                then
                        echo $b.ovr
                        l=$(sudo losetup -j $b.ovr | cut -d : -f1)
                        echo $l
                        $(sudo test -n "$l") && sudo losetup -d $(sudo losetup -j $b.ovr | cut -d : -f1)
                        rm -f $b.ovr &> /dev/null
                fi
        done
}

function showHelp()
{
    echo -e "${PROG_NAME} v${PROG_VER} by ${AUTHOR} (${AUTHOR_EMAIL})${NORMAL_TEXT}"
    echo -e "${INVERT}${BOLD}${WHITE_TEXT}USAGE${NORMAL_TEXT}\n\t${0} ${GREEN_TEXT}<options>${NORMAL_TEXT}"
    echo -e "${INVERT}${BOLD}${GREEN_TEXT}Options${NORMAL_TEXT}:"
    echo -e "\t${BOLD}${WHITE_TEXT}--writable ${GREEN_TEXT}-w${NORMAL_TEXT} Mount the RAID Array in Writable mode (Default is Read-Only)${NORMAL_TEXT}"
    echo -e "\t${BOLD}${WHITE_TEXT}--fstab=   ${GREEN_TEXT}-f${NORMAL_TEXT} Append RAID mount to FSTAB (Optional: FSTAB file location.  If not given ${DEFAULT_FSTAB_LOCATION_LOCAL} is assumed${NORMAL_TEXT}"
    echo -e "\t${BOLD}${WHITE_TEXT}--help     ${GREEN_TEXT}-h${NORMAL_TEXT} Display this help message${NORMAL_TEXT}"
    echo -e "${INVERT}${BOLD}${GREEN_TEXT}NOTE:${NORMAL_TEXT}:${NORMAL_TEXT}"
    echo -e "\t${BOLD}${WHITE_TEXT}This script uses getopt which only allows options in the forms:${NORMAL_TEXT}"
    echo -e "\t${BOLD}${WHITE_TEXT}--xxxx=blaaa or --xxxx='blaaa' or -xblaaa or -x'blaaa'${NORMAL_TEXT}"
    echo -e "\t${BOLD}${RED_TEXT}NOT IN THE FORMS:${WHITE_TEXT} --xxxx blaaa or -x blaaa or -x=blaaa${NORMAL_TEXT}"
    echo -e "${INVERT}${BOLD}${GREEN_TEXT}Examples:${NORMAL_TEXT}:"
    echo -e "${0} ${GREEN_TEXT}-w${NORMAL_TEXT}\t\t\t\tMount RAID writable so files can be copied/moved/deleted from/to it${NORMAL_TEXT}"
    echo -e "${0} ${GREEN_TEXT}-f'/path/to/fstab'${NORMAL_TEXT}\tMount RAID Read-Only and append FSTAB file located at /path/to/fstab${NORMAL_TEXT}"
    echo -e "${0} ${GREEN_TEXT}-f/path/to/fstab${NORMAL_TEXT}\t\tSame as above, but not as easy to read${NORMAL_TEXT}"
    echo -e "${0} ${GREEN_TEXT}--writable -f${NORMAL_TEXT}\t\t\tMount RAID, then append FSTAB in default location of ${DEFAULT_FSTAB_LOCATION_LOCAL}${NORMAL_TEXT}"
    echo -e "${0} ${GREEN_TEXT}-fw${NORMAL_TEXT}\t\t\tSame as above${NORMAL_TEXT}"
    echo -e "${0} ${GREEN_TEXT}--fstab=/opt/fstab${NORMAL_TEXT}\t\tMount RAID Read-Only and append FSTAB file located at /opt/fstab${NORMAL_TEXT}"
}


##########Parse Options and parameters (arguments)
# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o 'whf::' --long 'writable,help,fstab::' -n "'${PROG_NAME}'" -- "$@")
retVal=$?
if [ ${retVal} -ne 0 ]
then
    errorText "Parsing Arguments (getopt error code: [${retVal}])"
    showHelp
    exit ${ERROR_GETOPT_ERROR}
fi

# Note the quotes around "$TEMP": they are essential!
#echo "TEMP: ${TEMP}"
eval set -- "$TEMP"
unset TEMP

while true
do
    case "${1}" in
        '-f'|'--fstab')
            appendFSTAB=${TRUE}
            # f has an optional argument. As we are in quoted mode,
            # an empty parameter will be generated if its optional
            # argument is not found.
            case "${2}" in
                '')
                    #No file was give, assume default
                    fstabLocation="${DEFAULT_FSTAB_LOCATION_LOCAL}"
                    ;;
                *)
                    fstabLocation="${2}"
                    ;;
            esac
            if ! $(sudo test -e "${fstabLocation}")
            then
                errorText "[${fstabLocation}] does not exist!"
                exit ${ERROR_FSTAB_NOT_FOUND}
            fi
            shift
            ;;
        '-w'|'--writable')
            driveMountMode=${READ_WRITE_MOUNT}
            ;;
        '-h'|'--help')
            showHelp
            exit 0
            ;;
        '--')
            shift # The double dash which separates options from parameters
            break
            ;; # Exit the loop using break command
        *)
            errorText "Option [$1] not recognized"
            showHelp
            exit ${ERROR_UNKNOWN_ARGUMENT}
            ;;
    esac
    shift
done


###############MAIN CODE
#echo -e "${NORMAL_TEXT}${NORMAL_BACKGROUND}Clearing screen...${NORMAL_TEXT}${NORMAL_BACKGROUND}"
#clear
infoText "Main Code Start[${PROG_NAME} v${PROG_VER} by ${AUTHOR} (${AUTHOR_EMAIL})]" ${INFO_TEXT_MISC_NO_DOTS}
#make sure sda1 is mounted, as need it for snapraid files
checkMount "${REMOTE_MOUNTPOINT}" "${REMOTE_DEVICE}"

###disable services that may get in the way of mounting and assembling the RAID
for service in ${SERVICES_TO_HOLD_UNTIL_RAID_MOUNTED[@]}
do
    infoText "Disabling [${service}] as it may interfere with RAID assembly and mounting" ${INFO_TEXT_MISC}
    runCommand "${ROOT_USER_NAME}" "systemctl stop ${service}"
    runCommand "${ROOT_USER_NAME}" "systemctl disable ${service}"
done

infoText "Unmounting and stopping any exiting RAID device named [${RAID_DEVICE}]" ${INFO_TEXT_MISC}
sudo umount "${RAID_DEVICE}" 2>/dev/null
sudo mdadm --misc "${RAID_DEVICE}" --stop 2>/dev/null

infoText "RAID config" ${INFO_TEXT_COPY}
copyFile "${MDADM_CONFIG_FILE_REMOTE}" "${MDADM_CONFIG_FILE_LOCAL}" "${FALSE}" "${ROOT_USER_NAME}:${ROOT_USER_NAME}"
#if ! $(sudo test -e ${RAID_MOUNTPOINT})
#then
#    makeDirectory "${RAID_MOUNTPOINT}" "${DOCKERUSER_NAME}:${DOCKERGROUP_NAME}"
#fi

###use mdadm --version and ${MDADM_VER} to see if we should download and install
### bloody mdadm --version can not be processed by anything, tried awk, tr, cut, >tempfile and still no joy
### so just see what is already installed (it's installed by default on server, but NOT desktop)
##'if mdadm is installed via apt, it will instantly try and assemble the array, and get stuck on the reshape....
if (( $(echo "$(apt-cache policy mdadm | grep Installed | awk '{print $2}' | awk 'BEGIN{FS="-"}; {print $1}') < ${MDADM_VER}" | bc -l) ))
then
    infoText "mdadm" ${INFO_TEXT_INSTALL}
    cd "${USER_INSTALLERS_DIR_LOCAL}"
    download "https://mirrors.edge.kernel.org/pub/linux/utils/raid/mdadm/mdadm-${MDADM_VER}.tar.gz" "mdadm-${MDADM_VER}.tar.gz"
    #makeDirectory "mdadm-${MDADM_VER}" "${USER_NAME}:${GROUP_NAME}"
    runCommand "${USER_NAME}" "tar xf mdadm-${MDADM_VER}.tar.gz"
    cd "mdadm-${MDADM_VER}"
    make &>"{logfile}"
    sudo make install &>>"{logfile}"
    cd "${USER_HOME_DIR_LOCAL}"
fi

if [ "${driveMountMode}" == "${READ_ONLY_MOUNT}" ]
then
    infoText "Assembling RAID (READ-ONLY)" ${INFO_TEXT_MISC}
    #don't check the exit code of this, as it returns an error if it is already assembled
    sudo mdadm --assemble --readonly --scan
    until grep -A1 "^${RAID_DEVICE#/dev/} :" /proc/mdstat | grep -q '\[UU*\]'
    do
        infoText "Waiting for RAID [${RAID_DEVICE#/dev/}] to assemble" ${INFO_TEXT_MISC}
        cat /proc/mdstat
        sleep 2
    done
    infoText "Mounting RAID [${RAID_DEVICE}] (READ-ONLY) at [${RAID_MOUNTPOINT}]" ${INFO_TEXT_MISC}
    mountDrive "${RAID_DEVICE}" "${RAID_MOUNTPOINT}" "noload,ro" "${RAID_FILESYSTEM}" "${DOCKERUSER_NAME}:${DOCKERGROUP_NAME}"
elif [ "${driveMountMode}" == "${READ_WRITE_MOUNT}" ]
then
    infoText "Assembling RAID (WRITABLE)" ${INFO_TEXT_MISC}
    #don't check the exit code of this, as it returns an error if it is already assembled
    sudo mdadm --assemble --scan
    until grep -A1 "^${RAID_DEVICE#/dev/} :" /proc/mdstat | grep -q '\[UU*\]'
    do
        infoText "Waiting for RAID [${RAID_DEVICE#/dev/}] to assemble" ${INFO_TEXT_MISC}
        cat /proc/mdstat
        sleep 2
    done

    infoText "Mounting RAID [${RAID_DEVICE}] (WRITABLE) at [${RAID_MOUNTPOINT}]" ${INFO_TEXT_MISC}
    mountDrive "${RAID_DEVICE}" "${RAID_MOUNTPOINT}" "${DOCKERUSER_NAME}:${DOCKERGROUP_NAME}"

    infoText "PlexMediaServer" ${INFO_TEXT_SETUP}
	infoText "secondary groups to users" ${INFO_TEXT_ADD}
	#to save having to chown the whole plex library (a long task) grab the uid and gid from the exisiting library and assign
	runCommand "${ROOT_USER_NAME}" "usermod ${PLEX_USER_NAME} --uid $(ls -dn ${RAID_MOUNTPOINT}/appdata/plexdata | awk '{print $3}') -aG ${DOCKERGROUP_NAME}"
	runCommand "${ROOT_USER_NAME}" "groupmod ${PLEX_USER_NAME} --gid $(ls -dn ${RAID_MOUNTPOINT}/appdata/plexdata | awk '{print $4}')"

	if $(sudo test -e "${VAR_DIR_LOCAL}/lib/plexmediaserver")
	then
        if [[ $(stat ${VAR_DIR_LOCAL}/lib/plexmediaserver) != *"symbolic link"* ]]
        then
            infoText "Deleting ${VAR_DIR_LOCAL}/lib/plexmediaserver" ${INFO_TEXT_MISC}
            deleteFile "${VAR_DIR_LOCAL}/lib/plexmediaserver"
            linkFile "${VAR_DIR_LOCAL}/lib/plexmediaserver" "${RAID_MOUNTPOINT}/appdata/plexdata/"
        fi
    else
		linkFile "${VAR_DIR_LOCAL}/lib/plexmediaserver" "${RAID_MOUNTPOINT}/appdata/plexdata/"
    fi
    #if it existed and wasn't a symlink then it was deleted, if it was a symlink it already has the right permissions
    #as we changed the uid and gid above.  If it didn;t exist, that's where we need to eb in any case so we can create the link
    #infoText "Plex Library File Permissions" ${INFO_TEXT_APPLY}
	#runCommand "${ROOT_USER_NAME}" "chown -R ${PLEX_USER_NAME}:${PLEX_USER_NAME} '${VAR_DIR_LOCAL}/lib/plexmediaserver'"

	#sudo chown -R ${PLEX_USER_NAME}:${PLEX_USER_NAME} "${RAID_MOUNTPOINT}/appdata/plexdata"
	#sudo chown -R ${PLEX_USER_NAME}:${PLEX_USER_NAME} "${VAR_DIR_LOCAL}/lib/plexmediaserver"
	#best done by make pool, as it's a pool dependancy
    #makeDirectory "/data" "${PLEX_USER_NAME}:${PLEX_USER_NAME}"
	#linkFile "/data/tvshows" "${POOL_MOUNTPOINT}/TV"
	#linkFile "/data/movies" "${POOL_MOUNTPOINT}/Movies"

    infoText "All set up, enabling and restarting services to pick up new config" ${INFO_TEXT_MISC}
    for service in ${SERVICES_TO_HOLD_UNTIL_RAID_MOUNTED[@]}
    do
        infoText "Enabling [${service}]..." ${INFO_TEXT_MISC}
        runCommand "${ROOT_USER_NAME}" "systemctl enable ${service}"
        runCommand "${ROOT_USER_NAME}" "systemctl start ${service}"
    done

    restartServices

    infoText "Downloading and Starting Docker Containers" ${INFO_TEXT_MISC}
    #as we have write access, it's safe to start up the docker containers now
    cd "${DOCKER_COMPOSE_SCRIPTS_DIR_LOCAL}"
    ##tor gets in the way of tor-proxy
    #runCommand "${ROOT_USER_NAME}" "systemctl disable tor"
    #runCommand "${ROOT_USER_NAME}" "systemctl stop tor"
    runCommand "${USER_NAME}" "docker-compose pull"
    runCommand "${USER_NAME}" "docker-compose build --pull"
    runCommand "${USER_NAME}" "docker-compose up -d"

    infoText "Updating Boot Config" ${INFO_TEXT_MISC}
    #the link file for renaming network interfaces under systemd happens
    #very early in the boot cycle, so initramfs needs to be rebuilt with it in
    runCommand "${ROOT_USER_NAME}" "update-initramfs -u"
fi

infoText "Increasing RAID speed" ${INFO_TEXT_MISC}
sudo sysctl -w dev.raid.speed_limit_min=50000
sudo sysctl -w dev.raid.speed_limit_max=5000000
sudo blockdev --setra 65536 "${RAID_DEVICE}"
echo "32768" | sudo tee /sys/block/${RAID_DEVICE##/dev/}/md/stripe_cache_size
echo "deadline" | sudo tee /sys/block/${RAID_DEVICE##/dev/}/queue/scheduler

infoText "RAID Info" ${INFO_TEXT_MISC}
cat /proc/mdstat
mount | grep "${RAID_DEVICE}"
mdadm --version
#weird that I pause only this script and not the others, but there is a lot of important
#info happening here, and this is the last script
read -p "Press return to continue..." i
infoText "To Backup Copy and Paste This Block Of Code:" ${INFO_TEXT_MISC_NO_DOTS}
echo -e "#CODE BLOCK START#" &&
echo -e "RAID_MOUNTPOINT=\"<Location RAID is mounted eg /mnt/data>\" &&" &&
echo -e "POOL_MOUNTPOINT=\"<Location Pool is mounted eg /mnt/pool>\" &&" &&
echo -e "BACKUP_LOCATION=\"<Location on pool you want backups to go eg raid-backups>\" &&" &&
echo -e "if \$(sudo test -e \"\${POOL_MOUNTPOINT}\")" &&
echo -e "then" &&
echo -e "  if ! \$(sudo test -e \"\${POOL_MOUNTPOINT}/\${BACKUP_LOCATION}\")" &&
echo -e "  then" &&
echo -e "      mkdir -p \"\${POOL_MOUNTPOINT}/\${BACKUP_LOCATION}\"" &&
echo -e "  fi &&" &&
echo -e "  for directory in \"\${RAID_MOUNTPOINT}\"/*" &&
echo -e "  do" &&
echo -e "    directoryName=\"$(basename \"\${directory}\")\" &&" &&
echo -e "    dateString=\"$(date +\"%F_%H-%M-%S\")\" &&" &&
echo -e "    backupFilename=\"\${POOL_MOUNTPOINT}/\${BACKUP_LOCATION}/\${directoryName}-backup-\${dateString}.tar.gz\" &&" &&
echo -e "    if ! \$(sudo test -e \"\${backupFilename}\")" &&
echo -e "    then" &&
echo -e "        echo -en \"\\\\e[1;5;34;43mBacking up\\\\e[0m: [\${directory}] to \" &&" &&
echo -e "          echo -e \"[\${backupFilename}]...\" &&" &&
#echo -e "        sudo tar --exclude=\"${RAID_MOUNTPOINT}/Backups/MAIN-PC\" \\" &&
echo -e "        sudo tar --exclude=\"${RAID_MOUNTPOINT}/Backups/MAIN-PC\" \\" &&
echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Backups/Config\" \\" &&
echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Backups/MAIN-PC\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Pictures\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Newsgroups\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Music\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Karaoke\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/ISOs\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Downloads\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Docs\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Comics\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Books\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Backups\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/Audiobooks\" \\" &&
#echo -e "          --exclude=\"${RAID_MOUNTPOINT}/\\\$RECYCLE.BIN\" \\" &&
#echo -e "          -cpvzf \"\${BACKUP_LOCATION}/\$(basename \"\${directory}\")-backup.tar.gz\" \"\${directory}\" \\" &&
echo -e "          -cpf - \"\${directory}\" | pv -F \"%N %b %t Cur%r Avg%a %p ETA:%e\" -s \$(du -sb \"\${directory}\" \\" &&
echo -e "            | awk '{print \$1}') | gzip > \"\${backupFilename}\"" &&
echo -e "    fi &&" &&
echo -e "  done &&" &&
echo -e "fi" &&
echo -e "#CODE BLOCK END#"

infoText "To Restore Copy And Paste This Block Of Code (will not restore if a directory already exists at destination's root):" ${INFO_TEXT_MISC_NO_DOTS}
echo -e "#CODE BLOCK START#" &&
echo -e "RAID_MOUNTPOINT=\"<Location RAID is mounted eg /mnt/data>\" &&" &&
echo -e "BACKUP_LOCATION=\"<Location RAID is mounted eg /mnt/pool/raid-backups>\" &&" &&
echo -e "for backupFiles in \"\${BACKUP_LOCATION}/*.tar.gz" &&
echo -e "do" &&
echo -e "  if ! \$(sudo test -e \"${RAID_MOUNTPOINT}/\$(cut -d/ -f7 - <<<\${backupFiles%%-backup*.tar.gz})\")" &&
echo -e "  then" &&
echo -e "    echo -en \"\\\\e[1;5;34;43mRestoring\\\\e[0m: [\${backupFiles}] to \"" &&
echo -e "     echo -e \"[${RAID_MOUNTPOINT}/\$(cut -d/ -f7 - <<<\${backupFiles%%-backup*.tar.gz})]...\"" &&
echo -e "   sudo pv -F \"%N %b %t Cur%r Avg%a %p ETA:%e\" \"\${backupFiles}\" | sudo tar --extract --atime-preserve=replace\\"&&
echo -e "      --preserve-permissions --same-owner --xattrs --check-links --strip-components=2 --ungzip \\" &&
echo -e "      --directory=\"${RAID_MOUNTPOINT}\" \\" &&
echo -e "      --file=-" &&
echo -e "  fi" &&
echo -e "done" &&
echo -e "#CODE BLOCK END#"

infoText "To Restore A SPECIFIC FOLDER/FILE Copy And Paste This Block Of Code (will not restore if a directory already exists at destination's root):" ${INFO_TEXT_MISC_NO_DOTS}
echo -e "#CODE BLOCK START#" &&
echo -e "backupFile=\"<Backup file, eg /mnt/pool/raid-backups/backup-2019-09-07_01-05.tar.gz>\" &&" &&
echo -e "toExtract=\"<folder to extract without leading slash eg mnt/data/myapp>\" &&" &&
echo -e "RAID_MOUNTPOINT=\"<RAID mountpoint eg /mnt/data>\" &&" &&
echo -e "extractionRoot=\"\${RAID_MOUNTPOINT}/\$(cut -d/ -f7 - <<<\${backupFile%%-backup-*.tar.gz})\" &&" &&
echo -e "echo -en \"\\\\e[1;5;34;43mRestoring\\\\e[0m: [\${toExtract##\${extractionRoot#/}/}] from \" &&" &&
echo -e "  echo -e \"[\${backupFile}] to [\${extractionRoot}]...\" &&" &&
echo -e "sudo pv -F \"%N %b %t Cur%r Avg%a %p ETA:%e\" \"\${backupFile}\" | sudo tar --extract --atime-preserve=replace \\" &&
echo -e "  --preserve-permissions --same-owner --xattrs --check-links --strip-components=2 --ungzip \\" &&
echo -e "  --directory=\"\${RAID_MOUNTPOINT}\" \\" &&
echo -e "  --file=- \"\${toExtract}\"" &&
echo -e "#CODE BLOCK END#"
#sudo pv -F "%N %b %t Cur%r Avg%a %p ETA:%e" "/mnt/data/raid-backups/backup-2019-09-07_01-05.tar.gz" | sudo tar --extract --atime-preserve=replace --preserve-permissions --same-owner --xattrs --check-links --strip-components=2 --ungzip --directory="/mnt/data" --file=- mnt/data/apps/myapp

if [ "${appendFSTAB}" == "${TRUE}" ]
then
    echo -e "${OK_BOLD_TEXT}The following has been added to your ${fstabLocation} file${NORMAL_TEXT}"
    appendToFile "${fstabLocation}" "$(cat ${RAID_FSTAB_REMOTE})"
fi
